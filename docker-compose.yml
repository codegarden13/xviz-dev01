# basics from https://github.com/quandes/wordpress-docker-compose/blob/master/docker-compose.yml
# networks for any service is not needed because of default network that compose creates

 # https://docs.docker.com/get-started/docker-concepts/running-containers/sharing-local-files/

services:
  db:                 # mariadb für mac
    # docker MySQL database with persistent storage.
    # image: mysql:8.0
    # image: mariadb:10.6.4-focal
    # MariaDB only creates databases on startup using the MYSQL_DATABASE env variable — and only one database can be created this way.
    container_name: "${COMPOSE_PROJECT_NAME}-mysql"
    image: mariadb:latest
    ports:
      - ${IP}:3306:3306 # change ip if required

    volumes:
      - db_data:/var/lib/mysql
      - ./init-db:/docker-entrypoint-initdb.d # this will hold the sql for dbs

    #restart: always

    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      #MYSQL_DATABASE: ${WP_DB_NAME_prd}
      MYSQL_USER: ${WP_DB_USER}
      MYSQL_PASSWORD: ${DB_ROOT_PASSWORD}

    command: >
      --default-authentication-plugin=mysql_native_password

  phpmyadmin:         # depends on DB https://docs.phpmyadmin.net/en/latest/setup.html#docker-environment-variables

    container_name: "${COMPOSE_PROJECT_NAME}-phpmyadmin"
    
    depends_on:
      - db

    image: arm64v8/phpmyadmin
    
    #restart: always
    
    ports:
      - ${PHP_MY_ADMIN_PORT}:80

    environment:
      PMA_HOST: db
      UPLOAD_LIMIT: 500M
      MEMORY_LIMIT: 1010M
      MAX_EXECUTION_TIME: 100000
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"
  
  
  WP_stg:             # WordPress application, which depends on the database service.

    container_name: "${COMPOSE_PROJECT_NAME}_stg"
    
    depends_on:
      - db
    
    #links:
    #  - db:mysql
    
    image: wordpress:latest
    ports:
       - ${WP_PORT_stg}:80 # change ip and port if required 
    #restart: always
    
    volumes:
       - ./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini 
       # map ./config/php.conf.ini into the container so that the PHP picks up our additional configuration settings specified below. 
       # This makes it possible to increase the upload limit. Every project gets the same config
       - ./${FILE_PATH_stg}:/var/www/html/ # Full wordpress project
       - ${PWD}/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
       #- ${PWD}/wp-conf-stg/wp-config.php:/var/www/html/wp-config.php

    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_NAME: ${WP_DB_NAME_stg}
      WORDPRESS_DB_USER: ${WP_DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_ROOT_PASSWORD}
      WORDPRESS_TABLE_PREFIX: wp_
      WORDPRESS_DEBUG: 1
  
  WP_prd:             # WordPress application, which depends on the database service.


    container_name: "${COMPOSE_PROJECT_NAME}_prd"
    
    depends_on:
      - db
    
    #links:
    #  - db:mysql
    
    image: wordpress:latest
    ports:
       - ${WP_PORT_prd}:80 # change ip and port if required 
    #restart: always
    
    volumes:
       - ./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini 
       # map ./config/php.conf.ini into the container so that the PHP picks up our additional configuration settings specified below. 
       # This makes it possible to increase the upload limit. Every project gets the same config
       - ./${FILE_PATH_prd}:/var/www/html/ # Full wordpress project
       - ${PWD}/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
       #- ${PWD}/wp-conf-prd/wp-config.php:/var/www/html/wp-config.php
    
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_NAME: ${WP_DB_NAME_prd}
      WORDPRESS_DB_USER: ${WP_DB_USER}
      WORDPRESS_DB_PASSWORD: ${DB_ROOT_PASSWORD}
      WORDPRESS_TABLE_PREFIX: wp_
      WORDPRESS_DEBUG: 1

  wpcli_prd:      

    container_name: "${COMPOSE_PROJECT_NAME}-wpcli_prd"

    depends_on:
      - db
      - WP_prd

    image: wordpress:cli
    
    # required to run wordpress-cli with the same user-id as wordpress. This way there are no permission problems when running the cli
    user: '33:33'
    
    # WP CLI needs the environment variables used for the Wordpress image - really ????
    environment:
     WORDPRESS_DB_HOST: db
     WORDPRESS_DB_NAME: ${WP_DB_NAME_prd}
     WORDPRESS_DB_USER: ${WP_DB_USER}
     WORDPRESS_DB_PASSWORD: ${DB_ROOT_PASSWORD}
     WORDPRESS_TABLE_PREFIX: wp_
    #  WP_CLI_CACHE_DIR: ./${FILE_PATH_prd}/.wpcli/cache ?
     WP_CLI_CACHE_DIR: /var/www/html/.wp-cli/cache/
    
    entrypoint: wp
    
    volumes:
      - ./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini
      - ./${FILE_PATH_prd}:/var/www/html/prd
      - ./input-data:/mnt/input-data:ro       # map input-data into the container 

  wpcli_stg:      

    container_name: "${COMPOSE_PROJECT_NAME}-wpcli_stg"
   
    depends_on:
      - db
      - WP_stg

    image: wordpress:cli
    
    # required to run wordpress-cli with the same
    # user-id as wordpress. This way there are no permission problems when running the cli
      
    user: '33:33'
    
    # WP CLI needs the environment variables used for the Wordpress image - really ????
    environment:
     WORDPRESS_DB_HOST: db
     WORDPRESS_DB_NAME: ${WP_DB_NAME_stg}
     WORDPRESS_DB_USER: ${WP_DB_USER}
     WORDPRESS_DB_PASSWORD: ${DB_ROOT_PASSWORD}
     WORDPRESS_TABLE_PREFIX: wp_
    #  WP_CLI_CACHE_DIR: ./${FILE_PATH_prd}/.wpcli/cache ?
     WP_CLI_CACHE_DIR: /var/www/html/.wp-cli/cache/
    
    entrypoint: wp

    volumes:
      - ./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini
      - ./${FILE_PATH_stg}:/var/www/html/stg
      - ./input-data:/mnt/input-data:ro       # map input-data into the container 


volumes:
    input-data:
    db_data:
    prd:
    stg: 